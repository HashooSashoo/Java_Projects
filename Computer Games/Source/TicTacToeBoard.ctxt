#BlueJ class context
comment0.target=TicTacToeBoard
comment0.text=\r\n\ @author\ Zakariya\ Hashmi\r\n\ @version\ 1.6\r\n
comment1.params=
comment1.target=TicTacToeBoard()
comment1.text=\r\n\ Initialized\ all\ variables\ with\ sizes\ and\ values<br>\r\n\ gives\ the\ ticTacToe\ array\ "blank"\ elements\r\n
comment10.params=firstCoord\ secondCoord
comment10.target=boolean\ coordsValid(int,\ int)
comment10.text=\r\n\ uses\ both\ coordsInBounds\ and\ coordsEmpty\ methods\ to\ check\ if\ coords\ are\ ok\ to\ put\ on\ board\r\n
comment11.params=firstCoord\ secondCoord\ xOrO
comment11.target=void\ changeBoard(int,\ int,\ java.lang.String)
comment11.text=\r\n\ changes\ an\ element\ in\ the\ board\ with\ a\ parameter<br>\r\n\ adds\ the\ new\ coords\ of\ changed\ element\ to\ coordsUsed<br>\r\n\ Increments\ the\ currentIndex\ number\ by\ 1<br>\r\n\ finally,\ checks\ coord\ element\ and\ puts\ in\ respective\ array\ using\ cheeckAndSaveElement\ method<br>\r\n\ precondition\:\ String\ xOrO\ is\ either\ an\ _X_\ or\ an\ _O_\r\n
comment12.params=coords
comment12.target=int\ getHumanFirstCoords(int[])
comment12.text=\r\n\ gets\ the\ first\ coordinate\ from\ human\ input\ in\ the\ Scanner\ class\r\n
comment13.params=coords
comment13.target=int\ getHumanSecondCoords(int[])
comment13.text=\r\n\ gets\ the\ second\ coordinate\ from\ human\ input\ in\ the\ Scanner\ class\r\n
comment14.params=
comment14.target=int\ validNumPadCoord()
comment14.text=\r\n\ asks\ the\ player\ to\ put\ a\ coord\ from\ the\ num\ pad\ in\ terminal<br>\r\n\ first,\ checks\ the\ string\ to\ see\ if\ there\ is\ anything\ wrong\ with\ it<br>\r\n\ then,\ turns\ it\ into\ a\ number\ that\ is\ sent\ to\ the\ enterHumanCoords()\ method<br>\r\n\ if\ the\ conditional\ is\ missed\ somehow,\ 99\ is\ returned\ (this\ will\ cause\ the\ exception\ in\ enterHumanCoords()\ to\ activate)\r\n
comment15.params=
comment15.target=int[]\ enterHumanCoords()
comment15.text=\r\n\ turns\ the\ number\ entered\ in\ the\ keypad\ (due\ to\ its\ grid\ shape)\ to\ become\ coordinates\ on\ the\ board<br>\r\n\ checks\ if\ number\ is\ ok\ with\ validNumPadCoord()\ method,\ then\ puts\ respective\ coordinates\ in\ an\ array\ and\ returns\ it\r\n
comment16.params=
comment16.target=int\ getComputerCoords()
comment16.text=\r\n\ gives\ a\ random\ number\ between\ 0\ and\ 2\ for\ computer\ coords\ (since\ the\ 1st\ and\ 2nd\ coords\ have\ same\ domain,\ we\ don't\ need\ a\ second\ method)\r\n
comment17.params=
comment17.target=void\ announceWinner()
comment17.text=\r\n\ outputs\ the\ winner\ of\ the\ game,\ or\ nothing\ if\ no\ winner\ yet\r\n
comment18.params=
comment18.target=boolean\ checkIfTie()
comment18.text=\r\n\ checks\ the\ board\ to\ see\ if\ there\ is\ a\ tie\ game<br>\r\n\ looks\ to\ see\ if\ there\ are\ no\ empty\ elements,\ if\ thats\ the\ case\ (&\ there\ is\ no\ winner),\ then\ it\ is\ a\ tie\r\n
comment19.params=
comment19.target=java.lang.String\ getWinningCondition()
comment19.text=\r\n\ checks\ to\ see\ if\ there\ is\ a\ winning\ condition\ for\ a\ specified\ element\ type<br>\r\n\ precondition\:\ type\ is\ _O_\ or\ _X_\r\n
comment2.params=args
comment2.target=void\ main(java.lang.String[])
comment2.text=\r\n\ local\ main\ method\r\n
comment20.params=
comment20.target=boolean\ hasWon()
comment20.text=\r\n\ return\ a\ boolean\ to\ see\ if\ someone\ has\ won\ yet\r\n
comment21.params=
comment21.target=boolean\ isVertical()
comment21.text=\r\n\ Checks\ if\ there\ is\ a\ vertical\ win\ condition\ present\ on\ the\ board<br>\r\n\ analyzes\ the\ ticTacToe\ board\r\n
comment22.params=
comment22.target=java.lang.String\ verticalIndex()
comment22.text=\r\n\ like\ the\ isVertical\ method,\ but\ returns\ the\ element\ that\ satisfied\ the\ win\ condition\ instead\r\n
comment23.params=
comment23.target=boolean\ isHorizontal()
comment23.text=\r\n\ Checks\ if\ there\ is\ a\ horizontal\ win\ condition\ present\ on\ the\ board\r\n\ analyzes\ the\ ticTacToe\ board\r\n
comment24.params=
comment24.target=java.lang.String\ horizontalIndex()
comment24.text=\r\n\ like\ the\ isHorizontal\ method,\ but\ returns\ the\ element\ that\ satisfied\ the\ win\ condition\ instead\r\n
comment25.params=
comment25.target=boolean\ isDiagonal()
comment25.text=\r\n\ Checks\ if\ there\ is\ a\ diagonal\ win\ condition\ present\ on\ the\ board<br>\r\n\ analyzes\ the\ ticTacToe\ board\r\n
comment26.params=
comment26.target=java.lang.String\ diagonalIndex()
comment26.text=\r\n\ like\ the\ isDiagonal\ method,\ but\ returns\ the\ element\ that\ satisfied\ the\ win\ condition\ instead\r\n
comment27.params=
comment27.target=void\ humanTurn()
comment27.text=\r\n\ Human\ puts\ coordinates\ and\ the\ method\ checks\ if\ they\ are\ ok,\ if\ they\ are\ ok,\ then\ the\ element\ is\ put\ on\ the\ board.\r\n
comment28.params=
comment28.target=void\ computerTurn()
comment28.text=\r\n\ computer\ generates\ coords\ and\ they\ are\ put\ on\ the\ board\r\n\ if\ on\ hard\ mode,\ calls\ AIMoves()\ method\ to\ make\ a\ calculated\ move\ instead\ of\ a\ randomized\ one\r\n\ if\ not,\ makes\ a\ randomized\ move\r\n\ if\ not,\ and\ all\ spaces\ are\ used\ up\ or\ otherwise,\ do\ nothing\r\n
comment29.params=
comment29.target=boolean\ moveAIPossible()
comment29.text=\r\n\ analyzes\ the\ board\ checking\ if\ any\ conditions\ from\ various\ methods\ are\ true<br>\r\n\ part\ of\ AI\ methods\r\n
comment3.params=
comment3.target=java.lang.String[][]\ getBoard()
comment3.text=\r\n\ getter\ method\ for\ ticTacToe\ board<br>\r\n\ @returns\ ticTacToe\ instance\ variable\r\n
comment30.params=
comment30.target=void\ AIMoves()
comment30.text=\r\n\ checks\ if\ situation\ warrants\ the\ computer\ putting\ a\ blocking\ O,\ then\ puts\ the\ coordinates\ on\ the\ board\ with\ the\ putCoordinates()\ method\r\n\ part\ of\ AI\ methods\r\n
comment31.params=coords
comment31.target=void\ putCoordinates(int[])
comment31.text=\r\n\ a\ method\ that\ puts\ coordinates\ on\ a\ board\ with\ an\ int[]\ array\ parameter\r\n\ differs\ from\ changeBoard()\ because\ of\ int[]\ parameter\r\n\ part\ of\ AI\ methods\r\n
comment32.params=
comment32.target=boolean\ checkIfPutMid()
comment32.text=\r\n\ this\ method\ checks\ if\ only\ a\ middle\ square\ was\ put\ down\ by\ human\r\n\ NOT\ USED\ CURRENTLY\r\n
comment33.params=
comment33.target=int[]\ checkAllVerti()
comment33.text=\r\n\ checks\ if\ there\ is\ a\ vertical\ condition\ for\ every\ column\ using\ checkVertiTactic()\ method<br>\r\n\ returns\ the\ coordinates\ of\ the\ element\ if\ there\ need\ be\ one.\ Returns\ base\ case\ if\ n/a\r\n
comment34.params=index
comment34.target=int[]\ checkVertiTactic(int)
comment34.text=\r\n\ checks\ the\ specified\ board\ column\ to\ see\ if\ an\ element\ can\ be\ placed\ there\ to\ block<br>\r\n\ checks\ conditions\ for\ each\ scenario\ and\ changes\ coordinates\ for\ the\ situation<br>\r\n\ returns\ coordinates\ in\ int[]\ array,\ if\ no\ scenarios\ apply\ then\ the\ default\ coordinates\ {6,\ 9}\ are\ returned\r\n
comment35.params=
comment35.target=int[]\ checkAllDiag()
comment35.text=\r\n\ unlike\ the\ other\ AI\ methods,\ this\ one\ checks\ all\ the\ diagonal\ conditions\ at\ once\ since\ there\ aren't\ alot\ (5\ instead\ of\ 9)<br>\r\n\ it\ returns\ the\ coordinates\ for\ the\ diagonal\ element,\ but\ if\ not\ applicable,\ returns\ the\ base\ case\r\n
comment36.params=
comment36.target=int[]\ checkAllHoriz()
comment36.text=\r\n\ checks\ if\ there\ is\ a\ horizontal\ condition\ for\ every\ row\ using\ checkHorizTactic()\ method<br>\r\n\ returns\ the\ coordinates\ of\ the\ element\ if\ there\ need\ be\ one.\ Returns\ base\ case\ if\ n/a\r\n
comment37.params=index
comment37.target=int[]\ checkHorizTactic(int)
comment37.text=\r\n\ checks\ the\ specified\ board\ row\ to\ see\ if\ an\ element\ can\ be\ placed\ there\ to\ block<br>\r\n\ checks\ conditions\ for\ each\ scenario\ and\ changes\ coordinates\ for\ the\ situation<br>\r\n\ returns\ coordinates\ in\ int[]\ array,\ if\ no\ scenarios\ apply\ then\ the\ default\ coordinates\ {6,\ 9}\ are\ returned\r\n
comment38.params=
comment38.target=void\ playersBattle()
comment38.text=\r\n\ \r\n
comment39.params=
comment39.target=void\ playAgain()
comment39.text=\r\n\ asks\ if\ the\ player\ wants\ to\ play\ again.\ if\ yes,\ clears\ board\ and\ calls\ execute()\ method\r\n
comment4.params=
comment4.target=int[][]\ getCoordsUsed()
comment4.text=\r\n\ getter\ method\ for\ coordsUsed\ array<br>\r\n\ @returns\ coordsUsed\ array\r\n
comment40.params=
comment40.target=void\ execute()
comment40.text=\r\n\ the\ whole\ tic\ tac\ toe\ game\r\n
comment5.params=
comment5.target=void\ printBoard()
comment5.text=\r\n\ prints\ the\ board\ on\ the\ terminal\ to\ see\ progress\r\n
comment6.params=
comment6.target=void\ clearBoard()
comment6.text=\r\n\ makes\ the\ board\ blank\ by\ filling\ it\ with\ blank\ elements<br>\r\n\ clears\ coordsUsed\ array\ and\ changes\ currentIndexCU\ to\ 0<br>\r\n\ also\ makes\ coordZeroZeroUsed\ false\ to\ be\ able\ to\ go\ to\ 0,0\r\n
comment7.params=firstCoord\ secondCoord
comment7.target=boolean\ coordEmpty(int,\ int)
comment7.text=\r\n\ first,\ specifically\ checks\ if\ coords\ 0,0\ is\ used\ with\ checkIfZero()\ method\ (cus\ i\ didn't\ know\ how\ to\ fix\ the\ bug\ lol)<br>\r\n\ then,\ checks\ if\ the\ given\ coordinate\ on\ the\ board\ is\ empty\ or\ not<br>\r\n\ precondition\:\ coords\ are\ more\ than\ or\ equal\ to\ zero\ and\ less\ than\ 4\r\n
comment8.params=firstCoord\ secondCoord
comment8.target=boolean\ checkZeroZero(int,\ int)
comment8.text=\r\n\ a\ method\ specifically\ for\ checking\ if\ coords\ 0,0\ has\ been\ used\ yet\r\n
comment9.params=firstCoord\ secondCoord
comment9.target=boolean\ coordInBounds(int,\ int)
comment9.text=\r\n\ checks\ if\ the\ given\ coordinates\ are\ in\ bounds\r\n
numComments=41
