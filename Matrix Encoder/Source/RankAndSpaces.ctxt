#BlueJ class context
comment0.target=RankAndSpaces
comment0.text=\r\n\ Linear\ Algebra\ Test\ 2\ -\ Option\ 2\ \:\ Part\ 2\ <br>\r\n\ All\ code\ by\:\ Zakariya\ Hashmi\r\n
comment1.params=
comment1.target=java.lang.String\ giveDimension()
comment1.text=\r\n\ tells\ the\ user\ to\ input\ a\ dimension\ of\ the\ matrix\ between\ 1\ and\ 15\ <br>\r\n\ the\ response\ is\ returned\ as\ a\ string\ value\r\n
comment10.params=
comment10.target=void\ getDimensionAndNumbers()
comment10.text=\r\n\ this\ method\ gets\ the\ specified\ dimensions\ of\ the\ matrix\ from\ the\ user,\ which\ are\ stores\ in\ variables\ dim1\ and\ dim2\ <br>\r\n\ it\ also\ gets\ two\ random\ numbers\ from\ the\ user\ and\ stores\ them\ in\ variables\ randNum1\ and\ randNum2\r\n
comment11.params=mat
comment11.target=int\ outputRank(double[][])
comment11.text=\r\n\ this\ method\ uses\ the\ rankOfMatrix\ method\ in\ the\ Matrix\ library\ to\ get\ the\ rank\ of\ a\ matrix\ <br>\r\n\ the\ rankOfMatrix\ method\ works\ by\ turning\ the\ matrix\ to\ reduced\ row\ echelon\ form\ <br>\r\n\ it\ then\ subtracts\ one\ from\ the\ dimension\ for\ every\ time\ there\ is\ a\ row\ of\ all\ zeros\r\n
comment12.params=
comment12.target=void\ problem5()
comment12.text=\r\n\ this\ method\ does\ many\ things...\ <br>\r\n\ it\ gets\ the\ dimensions\ of\ the\ variable\ matrix\ and\ numbers\ of\ the\ user\ with\ getDimensionAndNumbers()\ <br>\r\n\ it\ makes\ a\ matrix\ with\ the\ given\ dimensions\ with\ random\ numbers\ between\ the\ user\ given\ numbers\ <br>\r\n\ it\ prints\ the\ matrix\ out\ and\ gives\ the\ rank\ using\ Matrix.printMatrix()\ and\ outputRank()\ respectively\r\n
comment13.params=
comment13.target=void\ problem6()
comment13.text=\r\n\ this\ method\ takes\ a\ row\ vector\ and\ a\ column\ vector\ from\ the\ matrix\ and\ mulitplies\ both\ together\ <br>\r\n\ it\ uses\ Matrix.matrixMultiplication()\ to\ get\ a\ new\ result\ matrix\ <br>\r\n\ the\ rank\ is\ then\ outputed\ with\ outputRank()\r\n
comment14.params=
comment14.target=java.lang.String\ getResponseForRankedMat()
comment14.text=\r\n\ this\ method\ takes\ a\ response\ for\ what\ specified\ rank\ the\ user\ wants\ their\ matrix\ to\ be\ <br>\r\n\ it\ returns\ the\ value\ as\ a\ string\r\n
comment15.params=p_dimension
comment15.target=int\ verifyNumberExists(java.lang.String)
comment15.text=\r\n\ this\ method\ verifies\ that\ the\ number\ from\ getResponseForRankedMat()\ exists\ <br>\r\n\ if\ the\ response\ is\ not\ a\ real\ number,\ the\ user\ must\ input\ their\ response\ again\r\n
comment16.params=number
comment16.target=int\ confirmNumberOfRank(int)
comment16.text=\r\n\ this\ method\ checks\ to\ see\ if\ the\ specified\ rank\ is\ in\ between\ 1\ and\ the\ dimension\ of\ the\ matrix\ <br>\r\n\ if\ it\ doesn't\ follow\ this\ rule,\ the\ user\ needs\ to\ input\ another\ rank\r\n
comment17.params=rank
comment17.target=double[][]\ getMatrixWithLinearlyIndependentVectors(int)
comment17.text=\r\n\ this\ method\ generates\ dim1\ vectors\ in\ R^dim1\ <br>\r\n\ it\ creates\ a\ dim1\ by\ dim1\ matrix\ with\ dim1\ vectors\ <br>\r\n\ the\ vectors\ are\ checked\ to\ be\ lineatly\ independent\ by\ calculating\ the\ determinant\ <br>\r\n\ if\ the\ determinant\ is\ not\ zero,\ they\ are\ linearly\ independent,\ and\ the\ matrix\ is\ returned\r\n
comment18.params=squareMatrix\ rank
comment18.target=double[][]\ getMatrixWithKVectors(double[][],\ int)
comment18.text=\r\n\ this\ method\ takes\ the\ square\ matrix\ outputed\ in\ the\ above\ method\ <br>\r\n\ it\ shortens\ it\ so\ that\ there\ is\ only\ rank\ number\ of\ vectors\ in\ the\ matrix\ <br>\r\n\ that\ matrix\ is\ returned\r\n
comment19.params=vecMatrix
comment19.target=double[][]\ getSumOfTransverses(double[][])
comment19.text=\r\n\ this\ method\ multiplies\ every\ vector\ in\ the\ ranked\ matrix\ from\ getMatrixWithKVectors()\ <br>\r\n\ it\ uses\ Matrix.matrixMultiplication()\ to\ multiply\ them,\ and\ each\ result\ is\ added\ with\ Matrix.addMatrices()\ <br>\r\n\ the\ matrix\ with\ the\ sum\ of\ all\ of\ the\ transverses\ is\ returned\r\n\ NOTE\:\ CHANGE\ SO\ IT\ MIN\ OF\ DIMENSIONS\r\n
comment2.params=p_dimension
comment2.target=int\ verifyDimension(java.lang.String)
comment2.text=\r\n\ this\ method\ checks\ if\ the\ dimension\ entered\ is\ an\ actual\ number\ <br>\r\n\ if\ not\ an\ actual\ number,\ the\ method\ makes\ the\ user\ enter\ the\ dimension\ again\r\n
comment20.params=
comment20.target=double[][]\ giveASpecifiedRankMatrix()
comment20.text=\r\n\ this\ method\ takes\ the\ user\ given\ rank,\ and\ creates\ a\ matrix\ with\ dim1\ vectors\ in\ R^dim1\ <br>\r\n\ the\ resulting\ matrix\ is\ limited\ to\ only\ have\ rank\ number\ of\ vectors\ <br>\r\n\ the\ vectors\ are\ then\ multiplied\ to\ their\ transposes\ and\ added\ together\ to\ create\ a\ matrix\ with\ the\ user-specified\ rank\ <br>\r\n\ that\ matrix\ is\ returned\r\n
comment21.params=matrixo
comment21.target=double[][]\ putMatrixInDimMatrix(double[][])
comment21.text=\r\n\ this\ formats\ the\ matrix\ from\ getSumOfTransverses\ into\ a\ dim1\ by\ dim2\ matrix\ <br>\r\n\ the\ method\ usually\ chops\ off\ the\ matrix\ to\ make\ it\ fit\ into\ the\ dimensions\ given\ by\ the\ user\ <br>\r\n\ that\ matrix\ is\ then\ returned\r\n
comment22.params=
comment22.target=void\ problem7()
comment22.text=\r\n\ this\ method\ takes\ the\ user\ given\ rank,\ and\ creates\ a\ matrix\ with\ dim1\ vectors\ in\ R^dim1\ <br>\r\n\ the\ resulting\ matrix\ is\ limited\ to\ only\ have\ rank\ number\ of\ vectors\ <br>\r\n\ the\ vectors\ are\ then\ multiplied\ to\ their\ transposes\ and\ added\ together\ to\ create\ a\ matrix\ with\ the\ user-specified\ rank\ <br>\r\n\ that\ matrix\ is\ then\ formatted\ to\ meet\ the\ dimensions\ of\ the\ user,\ and\ the\ matrix\ is\ printed\r\n
comment23.params=
comment23.target=double[][]\ askUserForMatrix()
comment23.text=\r\n\ this\ method\ makes\ the\ user\ input\ a\ matrix\ all\ by\ themself\ <br>\r\n\ the\ user\ must\ first\ give\ the\ dimensions,\ and\ then\ enter\ in\ all\ of\ the\ elements\ of\ the\ matrix\ <br>\r\n\ that\ matrix\ is\ stored\ in\ the\ matrix\ instance\ variable\r\n
comment24.params=
comment24.target=void\ findBasesForMatrix()
comment24.text=\r\n\ this\ method\ finds\ the\ bases\ for\ a\ matrix\ given\ by\ the\ user\ <br>\r\n\ it\ first\ transposes\ the\ matrix\ with\ Matrix.transpose(),\ then\ turns\ it\ into\ reduced\ row\ echelon\ form\ with\ Matrix.rref()\ <br>\r\n\ that\ matrix\ is\ then\ printed\ out\r\n
comment25.params=rrefMat
comment25.target=int[]\ getIndexesOfIndepvectors(double[][])
comment26.params=indexes\ inputedMatrix
comment26.target=void\ getCorrespondingVectors(int[],\ double[][])
comment27.params=origMatrix
comment27.target=void\ isolateVectors(double[][])
comment28.params=
comment28.target=void\ problem8()
comment28.text=\r\n\ this\ method\ asks\ the\ user\ to\ input\ a\ matrix\ with\ dimensions\ of\ their\ choice\ <br>\r\n\ it\ then\ calculates\ the\ bases\ of\ the\ column\ space\ of\ the\ matrix\r\n
comment29.params=
comment29.target=void\ execute()
comment29.text=\r\n\ this\ method\ executes\ all\ of\ the\ problems\ in\ part\ 2\ of\ the\ test\r\n
comment3.params=p_dimension
comment3.target=int\ confirmRangeOfDimension(int)
comment3.text=\r\n\ this\ method\ checks\ if\ the\ number\ in\ verifyDimension()\ is\ between\ 1\ and\ 15\ <br>\r\n\ if\ it\ is\ not\ in\ the\ range,\ the\ method\ makes\ the\ user\ enter\ the\ dimension\ again\r\n
comment30.params=args
comment30.target=void\ main(java.lang.String[])
comment30.text=\r\n\ main\ method\r\n
comment4.params=
comment4.target=void\ assignDimension()
comment4.text=\r\n\ this\ method\ takes\ 2\ dimensions\ from\ the\ user\ and\ confirms\ that\ they\ are\ valid\ <br>\r\n\ it\ then\ puts\ those\ dimensions\ in\ dim1\ and\ dim2\ respectively\r\n
comment5.params=
comment5.target=java.lang.String\ getRandomNumbers()
comment5.text=\r\n\ this\ method\ asks\ for\ a\ random\ number\ from\ the\ user\ <br>\r\n\ it\ returns\ the\ number\ as\ a\ string\ value\r\n
comment6.params=p_dimension
comment6.target=int\ verifyNumber(java.lang.String)
comment6.text=\r\n\ this\ method\ verifies\ that\ the\ number\ is\ an\ actual\ number\ <br>\r\n\ if\ not\ a\ number,\ the\ method\ makes\ the\ user\ enter\ another\ number\r\n
comment7.params=
comment7.target=void\ confirmNumbers()
comment7.text=\r\n\ this\ method\ checks\ if\ of\ the\ 2\ numbers\ entered,\ the\ first\ one\ is\ smaller\ than\ the\ second\ one\ <br>\r\n\ it\ asks\ for\ and\ verifies\ two\ numbers,\ and\ if\ the\ second\ one\ is\ bigger,\ then\ both\ are\ assigned\ to\ randNum1\ and\ randNum2\ respectively\ <br>\r\n\ if\ the\ first\ one\ is\ bigger,\ however,\ the\ user\ must\ pick\ two\ different\ numbers\ and\ start\ over\r\n
comment8.params=
comment8.target=int\ randNumWithRange()
comment8.text=\r\n\ this\ method\ makes\ a\ random\ integer\ in\ between\ randNum1\ and\ randNum2\ (inclusive)\r\n
comment9.params=
comment9.target=void\ makeMatrix()
comment9.text=\r\n\ this\ method\ makes\ a\ matrix\ with\ the\ dimensions\ dim1\ and\ dim2\ and\ a\ double[][]\ 2d\ array\ <br>\r\n\ it\ then\ fills\ the\ matrix\ with\ random\ integers\ between\ randNum1\ and\ randNum2\ using\ randNumWithRange()\ <br>\r\n
numComments=31
