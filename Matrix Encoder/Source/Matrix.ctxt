#BlueJ class context
comment0.target=Matrix
comment0.text=\r\n\ Library\ of\ Matrix\ functions\ used\ by\ my\ programs\ <br>\r\n\ All\ code\ by\:\ Zakariya\ Hashmi\r\n
comment1.params=matrix
comment1.target=void\ printMatrix(double[][])
comment1.text=\r\n\ prints\ the\ encoding\ matrix's\ values\ in\ a\ grid\ form\r\n
comment10.params=a\ index
comment10.target=void\ gaussian(double[][],\ int[])
comment10.text=\r\n\ turns\ a\ matrix\ into\ row-echelon\ form\r\n
comment11.params=mat
comment11.target=double[][]\ transpose(double[][])
comment11.text=\r\n\ transposes\ a\ matrix\r\n
comment12.params=mat
comment12.target=double[][]\ ref(double[][])
comment13.params=mat
comment13.target=double[][]\ roundMatrix(double[][])
comment14.params=m\ row1\ row2
comment14.target=void\ swapRows(double[][],\ int,\ int)
comment14.text=\r\n\ swaps\ two\ specified\ rows\ of\ a\ matrix\r\n
comment15.params=m\ row\ scalar
comment15.target=void\ multiplyRow(double[][],\ int,\ double)
comment15.text=\r\n\ multiplies\ a\ row\ of\ a\ matrix\ by\ a\ scalar\r\n
comment16.params=m\ scalar\ subtract_scalar_times_this_row\ from_this_row
comment16.target=void\ subtractRows(double[][],\ double,\ int,\ int)
comment16.text=\r\n\ substracts\ a\ row\ by\ a\ scalar\ multiple\ of\ another\ row\r\n
comment17.params=mat
comment17.target=double[][]\ reducedRefMYWAY(double[][])
comment18.params=mat
comment18.target=int\ rank(double[][])
comment18.text=\r\n\ finds\ the\ rank\ of\ a\ matrix\ <br>\r\n\ first\ it\ reduces\ to\ reduces-row-echelon\ form\ courtesy\ of\ Matrix.rref()\ <br>\r\n\ then,\ for\ every\ row\ of\ all\ zeros\ in\ the\ matrix,\ it\ subtracts\ 1\ from\ the\ dimension\ <br>\r\n\ the\ final\ result\ is\ the\ rank\ of\ the\ matrix\r\n
comment2.params=matrix
comment2.target=double[][]\ duplicateMatrix(double[][])
comment2.text=\r\n\ takes\ a\ matrix\ and\ copies\ all\ of\ its\ elements\ to\ another\ matrix\ <br>\r\n\ returns\ that\ matrix\r\n
comment3.params=mat
comment3.target=double[][]\ changeIntToDoubleMatrix(int[][])
comment4.params=mat
comment4.target=int[][]\ changeDoubleToIntMatrix(double[][])
comment5.params=mat1\ mat2
comment5.target=double[][]\ addMatrices(double[][],\ double[][])
comment5.text=\r\n\ adds\ two\ matrices\ of\ the\ same\ dimensions\ together\r\n
comment6.params=mat\ size
comment6.target=double\ determinant(double[][],\ int)
comment6.text=\r\n\ this\ is\ a\ method\ to\ get\ the\ determinant\ of\ a\ square\ matrix\ of\ any\ size\r\n
comment7.params=number\ places
comment7.target=double\ roundNumber(double,\ int)
comment7.text=\r\n\ just\ some\ code\ to\ round\ a\ decimal\ to\ any\ place\r\n
comment8.params=matrix1\ rows1\ cols1\ matrix2\ rows2\ cols2
comment8.target=double[][]\ matrixMultiplication(double[][],\ int,\ int,\ double[][],\ int,\ int)
comment8.text=\r\n\ this\ method\ multiplies\ two\ matrices\ of\ any\ size\r\n
comment9.params=a
comment9.target=double[][]\ invert(double[][])
comment9.text=\r\n\ this\ code\ inverts\ an\ invertable\ square\ matrix\ of\ any\ size\ <br>\r\n\ It\ first\ transforms\ it\ to\ an\ upper\ triangle\ (row-echelon\ form),\ then\ it\ inverts\ it\ with\ row\ operations.\r\n
numComments=19
