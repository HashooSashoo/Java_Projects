#BlueJ class context
comment0.target=MatrixEncoder
comment0.text=\r\n\ Matrix\ Encoder\ and\ Decoder\ for\ Linear\ Algebra\ Bonus\ <br>\r\n\ All\ code\ by\:\ Zakariya\ Hashmi\r\n
comment1.params=
comment1.target=MatrixEncoder()
comment1.text=\r\n\ Constructor\ of\ MatrixEncoder.<br>\r\n\ Initializes\ both\ sizeOfMatrix\ and\ message.\r\n
comment10.params=arrayOfNums
comment10.target=void\ make2DLetterMatrix(int[])
comment10.text=\r\n\ this\ method\ turns\ an\ array\ of\ letter\ indexes\ into\ a\ 2D\ array\ <br>\r\n\ specifically,\ a\ 2D\ array\ that\ can\ be\ multiplied\ with\ the\ encoding\ matrix\ to\ get\ our\ final\ matrix\ <br>\r\n\ it\ first\ calculates\ how\ many\ elements\ we\ need\ in\ our\ matrix,\ and\ from\ there\ gets\ the\ rows\ and\ columns\ <br>\r\n\ after\ that,\ every\ letter\ index\ is\ placed\ in\ the\ matrixOfMessage\ instance\ variable\ (where\ we\ store\ the\ message\ matrix)\r\n
comment11.params=
comment11.target=void\ setTheLetterMatrix()
comment11.text=\r\n\ this\ method\ executes\ make2DLetterMatrix()\ with\ the\ parameter\ given\ by\ makeMessageArray()\r\n
comment12.params=
comment12.target=void\ multiplyLetterAndCode()
comment12.text=\r\n\ this\ method\ multiplies\ the\ letter-index\ matrix\ and\ the\ encoding\ matrix\ to\ get\ the\ final\ encoded\ matrix\ <br>\r\n\ the\ matrixes\ (along\ with\ row\ and\ column\ info)\ is\ put\ in\ the\ matrixMultiplication\ method\ to\ get\ a\ final\ result\ <br>\r\n\ after\ that,\ the\ final\ result\ is\ put\ in\ the\ finalCodedMatrix\ instance\ variable\r\n\ NOTE\:\ THE\ TRY-CATCH\ IS\ REQUIRED.\r\n
comment13.params=
comment13.target=int\ askForSize()
comment13.text=\r\n\ this\ method\ asks\ for\ what\ size\ of\ encoding\ matrix\ the\ user\ wants\ <br>\r\n\ NOTE\:\ ONLY\ ONE\ DIMENSION\ IS\ REQUIRED\ AS\ IT\ IS\ A\ SQUARE\ MATRIX\ <br>\r\n\ after\ getting\ the\ size,\ it\ is\ checked\ to\ see\ if\ it\ is\ an\ allowed\ size\ <br>\r\n\ after\ that,\ the\ size\ is\ assigned\ to\ the\ sizeOfMatrix\ instance\ variable\r\n
comment14.params=size
comment14.target=int\ sizeIsInputedCorrect(java.lang.String)
comment14.text=\r\n\ this\ method\ checks\ if\ the\ size\ inputed\ in\ askForSize()\ is\ an\ integer\ <br>\r\n\ it\ tries\ and\ catches\ an\ error,\ and\ makes\ you\ re-input\ if\ the\ test\ fails\r\n
comment15.params=size
comment15.target=int\ sizeError(int)
comment15.text=\r\n\ this\ method\ checks\ if\ the\ size\ inputed\ in\ askForSize()\ fits\ the\ size\ requirements\ <br>\r\n\ the\ size\ only\ passed\ if\ its\ less\ than\ 10,\ and\ smaller\ than\ the\ length\ of\ the\ message\ <br>\r\n\ it\ will\ also\ have\ to\ pass\ a\ test\ to\ see\ if\ there\ is\ one\ element\ for\ each\ letter\ in\ the\ message\ (length\ <\ size^2)\ <br>\r\n\ if\ it\ fails\ any\ of\ these\ tests,\ the\ user\ has\ to\ re-enter\ the\ size\r\n
comment16.params=size
comment16.target=int\ managableSize(java.lang.String)
comment16.text=\r\n\ executes\ both\ sizeIsInputedCorrect()\ and\ sizeError()\ to\ check\ if\ size\ is\ allowed\r\n
comment17.params=
comment17.target=void\ doEncoding()
comment17.text=\r\n\ this\ method\ does\ everything\ aforementioned\ to\ encode\ the\ message\ <br>\r\n\ it\ asks\ for\ and\ initializes\ the\ encoding\ matrix\ in\ askForEncodingMatrix()\ <br>\r\n\ it\ turns\ the\ message\ into\ a\ multipliable\ letter\ matrix\ in\ setTheLetterMatrix()\ <br>\r\n\ it\ multiplies\ both\ matrices\ to\ get\ the\ final\ result\ matrix\ in\ multiplyLetterAndCode()\ <br>\r\n\ finally,\ it\ prints\ out\ all\ the\ numbers\ in\ the\ final\ result,\ giving\ the\ user\ the\ code\ of\ their\ message\r\n
comment18.params=
comment18.target=void\ promptToEncode()
comment18.text=\r\n\ the\ yes/no\ command\ to\ begin\ doEncoding()\r\n
comment19.params=
comment19.target=int\ askForSizeEDITED()
comment2.params=newMessage
comment2.target=void\ changeMessage(java.lang.String)
comment2.text=\r\n\ modifier\ method\ of\ message\ instance\ variable\r\n
comment20.params=
comment20.target=void\ askForDecodingMatrix()
comment21.params=mat
comment21.target=double[][]\ changeIntToDoubleMatrix(int[][])
comment22.params=mat
comment22.target=int[][]\ changeDoubleToIntMatrix(double[][])
comment23.params=
comment23.target=void\ changeEncodingToInverse()
comment23.text=\r\n\ this\ method\ changes\ the\ encoding\ matrix\ to\ its\ inverse\ to\ decode\ the\ message\ <br>\r\n\ calls\ invert()\ method\ from\ Matrix\ class\r\n
comment24.params=
comment24.target=void\ getSizeOfFinalMatrix()
comment25.params=
comment25.target=void\ enterFinalMatrixElements()
comment26.params=
comment26.target=void\ askForFinalMatrix()
comment27.params=
comment27.target=void\ decodeForLetterMatrix()
comment28.params=
comment28.target=int[]\ letterMatrixToArray()
comment29.params=arrayOfLetters
comment29.target=void\ letterArrayToDecodedMessage(int[])
comment3.params=
comment3.target=void\ reset()
comment3.text=\r\n\ resets\ all\ instance\ variables\ to\ zero\ (or\ their\ equivalents\ of\ zero)\r\n
comment30.params=
comment30.target=void\ letterMatrixToMessage()
comment31.params=
comment31.target=void\ doDecoding()
comment32.params=
comment32.target=void\ chooseEncodeOrDecode()
comment33.params=
comment33.target=void\ wannaCodeAgain()
comment33.text=\r\n\ the\ yes/no\ command\ to\ restart\ doEncoding()\r\n
comment34.params=
comment34.target=void\ execute()
comment34.text=\r\n\ executes\ all\ of\ the\ code\r\n
comment35.params=args
comment35.target=void\ main(java.lang.String[])
comment35.text=\r\n\ main\ method\r\n
comment4.params=
comment4.target=void\ getMessage()
comment4.text=\r\n\ asks\ for\ user\ input\ of\ the\ message\ they\ would\ like\ to\ send\ <br>\r\n\ puts\ variable\ in\ message\ instance\ variable\r\n
comment5.params=
comment5.target=void\ printMatrix()
comment5.text=\r\n\ prints\ the\ encoding\ matrix's\ values\ in\ a\ grid\ form\r\n
comment6.params=
comment6.target=void\ askForEncodingMatrix()
comment6.text=\r\n\ Does\ 4\ things\:\ <br>\r\n\ It\ calls\ getMessage()\ to\ put\ the\ user's\ message\ in\ the\ message\ instance\ variable\ <br>\r\n\ It\ calls\ askForSize()\ to\ ask\ for\ and\ verify\ the\ size\ of\ the\ encoding\ matrix\ <br>\r\n\ It\ calls\ enterMatrixNum()\ to\ let\ the\ user\ enter\ all\ of\ their\ values\ for\ the\ encoding\ matrix\ <br>\r\n\ NOTE\:\ enterMatrixNum()\ also\ checks\ if\ the\ encoding\ values\ are\ inversible\ <br>\r\n\ Finally,\ it\ prints\ out\ all\ of\ the\ data\ that\ has\ been\ entered\ (message,\ encoding\ matrix\ size,\ matrix\ itself)\r\n
comment7.params=
comment7.target=void\ enterMatrixNum()
comment7.text=\r\n\ this\ method\ asks\ for\ every\ element\ of\ the\ encoding\ matrix\ individually\ <br>\r\n\ this\ method\ ONLY\ happens\ when\ the\ encoding\ matrix\ is\ initialized\ with\ it's\ verified\ size\ <br>\r\n\ it\ puts\ all\ of\ the\ values\ in\ the\ matrix\ instance\ variable\ <br>\r\n\ NOTE\:\ THERE\ IS\ NO\ CHECKING\ IF\ INPUT\ IS\ CORRECT.\ USER\ MUST\ ENTER\ INTEGERS\ ONLY.\r\n
comment8.params=matrixElem\ matrixSize
comment8.target=void\ checkIfInvertable(int[][],\ int)
comment8.text=\r\n\ this\ method\ checks\ if\ the\ encoding\ matrix\ is\ invertible\ <br>\r\n\ it\ calls\ the\ determinant()\ method\ to\ find\ the\ determinant\ and\ check\ if\ it\ doesn't\ equal\ zero\ <br>\r\n\ if\ the\ matrix\ is\ not\ invertible,\ enterMatrixNum90\ is\ called\ again\ to\ reenter\ the\ numbers\r\n
comment9.params=
comment9.target=int[]\ makeMessageArray()
comment9.text=\r\n\ this\ method\ finds\ the\ numerical\ positions\ of\ every\ letter\ in\ message\ and\ puts\ it\ in\ an\ array\ <br>\r\n\ there\ is\ an\ alphabet\ string\ that\ acts\ as\ a\ guide,\ and\ indexOf()\ is\ called\ to\ get\ the\ position\ <br>\r\n\ each\ number\ position\ is\ put\ in\ a\ 1D\ integer\ array\ that\ is\ returned\ by\ the\ method\r\n
numComments=36
